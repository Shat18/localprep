@model LocalPrep.Web.Models.ResetPasswordViewModel
@{ ViewBag.Title = "Create Password"; }

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css" />
<link rel="stylesheet" href="css/style.css" />


    <section id="page-content" style="padding: 0px;">
        <div class="container-fullscreen">
            <div class="col-md-12 solid-green-bg">
                <h1 class="text-center text-white">Create New Password</h1>
                <p class="text-center text-white">
                    Your new password is must be different from previously used passwords.
                </p>
            </div>
        </div>
    </section>
@using (Html.BeginForm("CreatePassword", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form",id= "frmCreatePassword" }))
{

                <div class="container">
                    <div class="row justify-content-center my-5">
                        <div class="loader-container" style="display:none">
                            <div class="loader"></div>
                        </div>
                        <div class="col-md-8 col-lg-6">
                            <div class="shadow rounded p-4">
                                @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage.Length > 0)
                                {
                                <div class="alert alert-success">@ViewBag.SuccessMessage Please Click here to Log in <a href="@Url.Action("Login", "Account")">here</a></div>}

                                @if (ViewBag.FailureMessage != null && ViewBag.FailureMessage.Length > 0)
                                {
                            <div class="alert alert-danger">@ViewBag.FailureMessage</div> } @*<div class="col-md-6 pb-5">*@
                                @Html.AntiForgeryToken()
                                @*<h4>Create New Password.</h4>
        <hr />*@
                                @Html.ValidationSummary("", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.Code)





                                @*<div class="row">*@
                                <div class="form-group mb-2">
                                    @Html.LabelFor(m => m.Password)
                                    <div class="input-group">
                                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password" })
                                        <div class="input-group-append">
                                            <span class="input-group-text" id="basic-addon2"><i class="bi bi-eye-slash" id="togglePassword"></i></span>

                                        </div>
                                    </div>
                                </div>

                                <div class="form-group mb-2">
                                    @Html.LabelFor(m => m.ConfirmPassword)
                                    <div class="input-group">
                                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", id = "confirmpassword" })
                                        <div class="input-group-append">
                                            <span class="input-group-text" id="basic-addon2"><i class="bi bi-eye-slash" id="togglePasswordConfirm"></i></span>

                                        </div>
                                    </div>
                                </div>
                                @*</div>*@

                                <div class="form-group">
                                    <div class=" mb-2">
                                        <input type="submit" class="btn btn-default" value="Submit" id="btnCreatePassword" />
                                    </div>
                                </div>
                                @*</div>*@
                            </div>
                        </div>

                    </div>
                </div>}

<script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.min.js"></script>
@section Scripts {

    <script src="js/app.js"></script>

    <script>
        const togglePassword = document.querySelector('#togglePassword');
        const password = document.querySelector('#password');
        const togglePasswordConfirm = document.querySelector('#togglePasswordConfirm');
        const confirmpassword = document.querySelector('#confirmpassword');
        $('#btnCreatePassword').on("click", function () {
            $(".loader-container").show();

            var form = jQuery("#frmCreatePassword");
            var status = form.valid();
            if (status) {

                $(".loader-container").hide();
            }
        });

        $(document).ready(function () {
            bsCustomFileInput.init()
        })

        function ValidNumeric() {

            var charCode = (event.which) ? event.which : event.keyCode;
            if (charCode >= 48 && charCode <= 57) { return true; }
            else { return false; }
        }

        togglePassword.addEventListener('click', function (e) {
            // toggle the type attribute
            const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
            password.setAttribute('type', type);
            // toggle the eye / eye slash icon
            this.classList.toggle('bi-eye');
        });

        togglePasswordConfirm.addEventListener('click', function (e) {
            // toggle the type attribute
            const type = confirmpassword.getAttribute('type') === 'password' ? 'text' : 'password';
            confirmpassword.setAttribute('type', type);
            // toggle the eye / eye slash icon
            this.classList.toggle('bi-eye');
        });

        $(document).on('keyup', '#phnnumber', function (e) {


            let text = $(this).val()
            text = text.replace(/\D/g, '')

            text = text.replace(/.{0}/, '$& ( ')
            text = text.replace(/.{6}/, '$& ) '); //Add hyphen at pos.4
            text = text.replace(/.{12}/, '$&-')   //Add hyphen at pos.8
            $(this).val(text.substring(0, 17)); //Set the new text
        });






    </script>


}
