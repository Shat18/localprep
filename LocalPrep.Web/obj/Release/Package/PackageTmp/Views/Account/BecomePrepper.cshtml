@model LocalPrep.Web.Models.RegisterViewModel
@{ ViewBag.Title = "Become a Meal Prepper";
    int dietCounter = 0;
    int cuisineCounter = 0; }
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css" />
<link rel="stylesheet" href="css/style.css" />

<section id="page-content" style="padding: 0px;">
    <div class="container-fullscreen">
        <div class="col-md-12 solid-green-bg">
            <h1 class="text-center text-white">BECOME A MEAL PREPPER</h1>
            <p class="text-center text-white">
                Thanks for your interest in becoming a Local Prep meal prepper. If you’re looking to expand your business by
                connecting with more customers nearby that have a more customized diet, you’ve come to the right place.
            </p>
        </div>
    </div>
</section>

<!-- Content -->
<section id="page-content">
    <div class="container">

        <div class="row">
            <div class="col-md-12">
                <h4 class="orange">
                    BELOW ARE QUESTIONS WE’LL NEED ANSWERED IF YOU’D LIKE TO BE CONSIDERED FOR OUR WEBSITE.
                    OUR STAFF WILL APPROVE YOUR APPLICATION.
                </h4>
                <p>
                    You’ll receive an email within 72-hours confirming or denying your application. If approved, there will be a follow-up
                    email with more information. At this time, you can use your credentials to log in and enhance your profile and add your menu to your profile.
                </p>
            </div>
        </div>
        <div class="col-md-12">

            @using (Html.BeginForm("BecomePrepper", "Account", FormMethod.Post, new { enctype = "multipart/form-data", role = "form", style = "width: 100%;", @id = "frmBecomePrepper" }))
            {
                <div class="loader-container" style="display:none">
                    <div class="loader"></div>
                </div>
                @Html.AntiForgeryToken()

                @Html.ValidationSummary("", new { @class = "text-danger" })
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.FirstName)
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control " })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.LastName)
                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control " })
                    </div>
                </div>

                <div class="row">
                    @*<div class="form-group col-md-6">
                    @Html.LabelFor(m => m.UserName)
                    @Html.TextBoxFor(m => m.UserName, new { @class = "form-control " })
                </div>*@

                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.Email)
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.PhoneNumber)
                        @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", maxlength = "25", id = "phnnumber", onkeypress = "return ValidNumeric()" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.Password)
                        <div class="input-group">
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password" })
                            <div class="input-group-append">
                                <span class="input-group-text" id="basic-addon2"><i class="bi bi-eye-slash" id="togglePassword"></i></span>

                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.ConfirmPassword)
                        <div class="input-group">
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", id = "confirmpassword" })
                            <div class="input-group-append">
                                <span class="input-group-text" id="basic-addon2"><i class="bi bi-eye-slash" id="togglePasswordConfirm"></i></span>

                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Address1)
                    @Html.TextBoxFor(m => m.Address1, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Address2)
                    @Html.TextBoxFor(m => m.Address2, new { @class = "form-control" })
                </div>

                <div class="row">
                    <div class="form-group col-md-5">
                        @Html.LabelFor(m => m.City)
                        @Html.TextBoxFor(m => m.City, new { @class = "form-control" })
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.short_code)
                        @*@Html.DropDownListFor(m => m.short_code, new SelectList(Model.States, "id", "short_code", "35"), new { @class = "form-control" })*@
                        @Html.DropDownListFor(m => m.short_code, ViewData["State"] as List<SelectListItem>, new { @id = "State", placeholder = "Select State" })
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(m => m.Zip)
                        @Html.TextBoxFor(m => m.Zip, new { @class = "form-control", onkeypress = "return ValidNumeric()", maxlength = "10" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.DriversLicense)
                        @Html.TextBoxFor(m => m.DriversLicense, new { @class = "form-control", maxlength = "16" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(m => m.SocialSecurityNumber)
                        @Html.TextBoxFor(m => m.SocialSecurityNumber, new { @class = "form-control", maxlength = "12",id= "SocialSecurityNumber" })
                    </div>
                </div>

                

                <div class="form-group">
                    <div class="form-group custom-file">

                        @Html.LabelFor(m => m.ImageFileDriversLicense, new { @class = "custom-file-label" })
                        @Html.TextBoxFor(m => m.ImageFileDriversLicense, new { @class = "form-control-file custom-file-input", @id = "flduploadDL", @type = "file" })
                        @Html.HiddenFor(x => x.filepathDL, new { @id = "hdnfilepathDL" })
                    </div>
                   
                    <div class="">
                        <img id="blahDL" src="#" alt="" class="img-fluid" style="max-width: 200px;" />                        
                    </div>
                   
                    
                </div>

                <div class="form-group" style="margin-top: 10px;">
                    @Html.LabelFor(m => m.CookingStyle)
                    @Html.TextAreaFor(m => m.CookingStyle, new { @class = "form-control", rows = "8" })
                </div>



                <div class="form-group">
                    <div class="form-group custom-file">
                        @Html.LabelFor(m => m.ImageFile, new { @class = "custom-file-label" })
                        @Html.TextBoxFor(m => m.ImageFile, new { @class = "form-control-file custom-file-input", @id = "imgInp", @type = "file" })
                        @Html.HiddenFor(x => x.filepath, new { @id = "hdnfilepath" })
                        @*<input accept="image/*" type='file' id="imgInp" />*@
                        @*<img id="blah" src="#" alt="your image" />*@
                    </div>
                    <div class="">
                        <img id="blah" src="#" alt="" class="img-fluid" style="max-width: 200px;"  />
                        @*<img src="~/img/empty-profile-image.jpg" class="img-fluid" style="max-width: 200px;" alt="@Model.ImageFile" />*@
                    </div>
                   
                    
                </div>





                <div class="form-group">
                    <input type="submit" class="btn btn-lp" value="Continue" id="btnsave" />
                </div>}
        </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.min.js"></script>
@section Scripts {
   
    <script src="js/app.js"></script>

    <script>
       
        $('#flduploadDL').on('change', function () {
            const [file] = flduploadDL.files
            if (file) {
                blahDL.src = URL.createObjectURL(file)
            }
        });
        

        $('#imgInp').on('change', function () {
            const [file] = imgInp.files
            if (file) {
                blah.src = URL.createObjectURL(file)
            }
        });

        


        const togglePassword = document.querySelector('#togglePassword');
        const password = document.querySelector('#password');
        const togglePasswordConfirm = document.querySelector('#togglePasswordConfirm');
        const confirmpassword = document.querySelector('#confirmpassword');
        $('#btnsave').on("click", function () {
            $(".loader-container").show();

            var form = jQuery("#frmBecomePrepper");
            var status = form.valid();
            if (status) {

                $(".loader-container").hide();
            }
        });

        $(document).ready(function () {
            bsCustomFileInput.init()
        })

        function ValidNumeric() {

            var charCode = (event.which) ? event.which : event.keyCode;
            if (charCode >= 48 && charCode <= 57) { return true; }
            else { return false; }
        }

        togglePassword.addEventListener('click', function (e) {
            // toggle the type attribute
            const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
            password.setAttribute('type', type);
            // toggle the eye / eye slash icon
            this.classList.toggle('bi-eye');
        });

        togglePasswordConfirm.addEventListener('click', function (e) {
            // toggle the type attribute
            const type = confirmpassword.getAttribute('type') === 'password' ? 'text' : 'password';
            confirmpassword.setAttribute('type', type);
            // toggle the eye / eye slash icon
            this.classList.toggle('bi-eye');
        });

        $(document).on('keyup', '#phnnumber', function (e) {
            

            let text = $(this).val()
            text = text.replace(/\D/g, '')

            text = text.replace(/.{0}/, '$& ( ')
            text = text.replace(/.{6}/, '$& ) '); //Add hyphen at pos.4
            text = text.replace(/.{12}/, '$&-')   //Add hyphen at pos.8
            $(this).val(text.substring(0, 17)); //Set the new text
        });

        $(document).on('keyup', '#SocialSecurityNumber', function (e) {

            let text = $(this).val()
            text = text.replace(/\D/g, '')

            if (text.length > 3) text = text.replace(/.{3}/, '$&-')
            if (text.length > 6) text = text.replace(/.{6}/, '$&-')
            $(this).val(text.substring(0, 11));
        });

        //$(document).on('keyup', 'your input element', function () {
        //    let text = $(this).val()
        //    text = text.replace(/\D/g, '')

        //    if (text.length > 3) text = text.replace(/.{3}/, '$&-')
        //    if (text.length > 6) text = text.replace(/.{6}/, '$&-')
        //    $(this).val(text.substring(0, 11));
        //});

        




    </script>


}
